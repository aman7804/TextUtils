{"version":3,"sources":["components/Navbar.js","components/TextForm.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","React","createElement","Fragment","className","style","mode","href","title","type","data-bs-toggle","data-bs-target","aria-controls","aria-expanded","aria-label","id","aria-current","onClick","toggleMode","htmlFor","defaultProps","about","TextForm","_useState","useState","_useState2","_slicedToArray","text","setText","_useState3","_useState4","preview","setPreview","_useState5","_useState6","wordCount","setWordCount","onMouseLeave","heading","whiteSpace","placeholder","value","onChange","event","target","split","length","rows","onMouseOver","toUpperCase","toLocaleLowerCase","join","newText","map","element","index","part1ofString","trim","charAt","part2ofString","slice","trimEnd","replace","newStr","EndSpaceIndex","i","substring","lastIndexOf","push","padding","paddingTop","border","App","color","backgroundColor","setMode","document","body","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","getElementById","render","StrictMode"],"mappings":"6LAGmB,SAASA,EAAOC,GAC3B,OACIC,IAAAC,cAAAD,IAAAE,SAAA,KACIF,IAAAC,cAAA,OAAKE,UAAU,0BAA0BC,MAAOL,EAAMM,MAClDL,IAAAC,cAAA,OAAKE,UAAU,mBACXH,IAAAC,cAAA,KAAGE,UAAU,eAAeC,MAAOL,EAAMM,KAAMC,KAAK,KAAKP,EAAMQ,OAC/DP,IAAAC,cAAA,UAAQE,UAAU,iBAAiBK,KAAK,SAASC,iBAAe,WAAWC,iBAAe,0BAA0BC,gBAAc,yBAAyBC,gBAAc,QAAQC,aAAW,qBACxLb,IAAAC,cAAA,QAAME,UAAU,yBAEpBH,IAAAC,cAAA,OAAKE,UAAU,2BAA2BW,GAAG,0BACzCd,IAAAC,cAAA,MAAIE,UAAU,mCACVH,IAAAC,cAAA,MAAIE,UAAU,YACVH,IAAAC,cAAA,KAAGE,UAAU,kBAAkBY,eAAa,OAAOX,MAAOL,EAAMM,KAAMC,KAAK,KAAI,UAMvFN,IAAAC,cAAA,OAAKE,UAAU,yBAAyBC,MAAOL,EAAMM,MACjDL,IAAAC,cAAA,SAAOE,UAAU,mBAAmBK,KAAK,WAAWQ,QAASjB,EAAMkB,WAAYH,GAAG,2BAClFd,IAAAC,cAAA,SAAOE,UAAU,mBAAmBe,QAAQ,0BAAyB,kBAYjGpB,EAAOqB,aAAa,CAChBZ,MAAO,UACPa,MAAO,eCpCA,SAASC,EAAStB,GAAM,IAAAuB,EACbC,mBAAS,IAAGC,EAAAC,YAAAH,EAAA,GAA5BI,EAAIF,EAAA,GAACG,EAAOH,EAAA,GAAuBI,EACbL,mBAASG,GAAKG,EAAAJ,YAAAG,EAAA,GAApCE,EAAOD,EAAA,GAACE,EAAUF,EAAA,GAAAG,EAEIT,mBAAS,GAAEU,EAAAR,YAAAO,EAAA,GAAnCE,EAASD,EAAA,GAACE,EAAYF,EAAA,GAapBG,EAAa,WACfL,EAAWL,IAuHf,OACI1B,IAAAC,cAAAD,IAAAE,SAAA,KACIF,IAAAC,cAAA,OAAKa,GAAG,QACJd,IAAAC,cAAA,OAAKE,UAAU,iBAAiBC,MAAOL,EAAMM,KAAMS,GAAG,aAClDd,IAAAC,cAAA,UAAKF,EAAMsC,SACXrC,IAAAC,cAAA,OAAKE,UAAU,QACXH,IAAAC,cAAA,YAAUG,MAAO,CAACkC,WAAW,UAAWC,YAAY,qBAAqBpC,UAAU,eAAeqC,MAAOd,EAAMe,SA1I9G,SAACC,GAClBf,EAAQe,EAAMC,OAAOH,OACX,KAAPd,GAAWS,EAAa,GAC3BA,EAAaT,EAAKkB,MAAM,OAAOC,SAuI0H/B,GAAG,QAAQgC,KAAK,OAE7J9C,IAAAC,cAAA,UAAQE,UAAU,uBAAsB4C,YAnI7B,WACvBhB,EAAWL,EAAKsB,gBAkIyEZ,aAAcA,EAAcpB,QAtIzG,WACZW,EAAQD,EAAKsB,iBAqI4H,aAC7HhD,IAAAC,cAAA,UAAQE,UAAU,4BAA4B4C,YAzHjC,WACzBhB,EAAWL,EAAKuB,sBAwH+Eb,aAAcA,EAAcpB,QA5H/G,WACZW,EAAQD,EAAKuB,uBA2HkI,aACnIjD,IAAAC,cAAA,UAAQE,UAAU,4BAA4B4C,YAlH1B,WAChChB,EAAWL,EAAKkB,MAAM,OAAOM,KAAK,OAiHoEd,aAAcA,EAAcpB,QArH/G,WACnBW,EAAQD,EAAKkB,MAAM,OAAOM,KAAK,QAoH8H,sBACjJlD,IAAAC,cAAA,UAAQE,UAAU,4BAA4B4C,YAzFhC,WAC1B,IAAII,EAAUzB,EAAKkB,MAAM,OAAOM,KAAK,KAgBrCC,GAdAA,GADAA,EAAUA,EAAQP,MAAM,MACRQ,IAAI,SAACC,EAAQC,GACzB,GAAW,IAARA,EAAU,CAET,IAAIC,GADJF,EAAQA,EAAQG,QACYC,OAAO,GAAGT,cAClCU,EAAgBL,EAAQM,MAAM,GAAGV,oBACrCI,EAAUE,EAAgBG,MACzB,CAED,IAAIH,GADJF,EAAQA,EAAQO,WACYH,OAAO,GAAGT,cAClCU,EAAgBL,EAAQM,MAAM,GAAGV,oBACrCI,EAAU,IAAME,EAAgBG,EAEpC,OAAOL,KAEOH,KAAK,KACvBnB,EAAWoB,IAuEoFf,aAAcA,EAAcpB,QA9G9G,WACb,IAAImC,EAAUzB,EAAKkB,MAAM,OAAOM,KAAK,KAiBrCC,GAfAA,GADAA,EAAUA,EAAQP,MAAM,MACRQ,IAAI,SAACC,EAAQC,GAazB,OAZW,IAARA,GAECD,GADAA,EAAQA,EAAQG,QACAK,QAAQR,EAAQI,OAAO,GAAGJ,EAAQI,OAAO,GAAGT,gBACpDW,MAAM,GAAGV,qBAGM,OADvBI,EAAQA,EAAQO,WACLH,OAAO,KACdJ,EAAU,IAAIA,IAElBA,EAAQA,EAAQQ,QAAQR,EAAQI,OAAO,GAAGJ,EAAQI,OAAO,GAAGT,gBACpDW,MAAM,GAAGV,qBAEdI,KAEOH,KAAK,KACvBvB,EAAQwB,KA2FuI,aACnInD,IAAAC,cAAA,UAAQE,UAAU,4BAA4B4C,YAlEhC,WAC1B,IAAII,EAAUzB,EAAKkB,MAAM,KAQzBO,GAPAA,EAAQA,EAAQC,IAAI,SAACC,EAAQC,GAEzB,IAAIC,GADJF,EAAQA,EAAQG,QACYC,OAAO,GAAGT,cAClCU,EAAgBL,EAAQM,MAAM,GAAGV,oBAErC,OADAI,EAAUE,EAAgBG,KAGZR,KAAK,OACvBnB,EAAWoB,IAwDqFf,aAAcA,EAAcpB,QArE/G,WACbW,EAAQD,EAAKkB,MAAM,KAAKM,KAAK,UAoEoH,cACrIlD,IAAAC,cAAA,UAAQE,UAAU,4BAA4B4C,YAhC9D,WAII,IAHA,IAAIe,EAAO,GAEPC,EAAgB,EACZC,EAAE,EAAGA,EAAEtC,EAAKmB,OAAQmB,GAAGD,EAAc,CACzC,IAAIE,EAAYvC,EAAKuC,UAAUD,EAAEA,EAHzB,IAIJA,EAAMtC,EAAKmB,OAAO,EAJd,GAKJoB,EAAYvC,EAAKuC,UAAUD,EAAEtC,EAAKmB,OAAO,GACnB,KAAjBnB,EAAKsC,EANN,KAOJD,EAPI,GAQJE,EAAYvC,EAAKuC,UAAUD,EAAEA,EAAED,KAE/BA,EAAgBE,EAAUC,YAAY,KACtCD,EAAYvC,EAAKuC,UAAUD,EAAEA,EAAED,IAEnCD,EAAOK,KAAKF,GAEhBlC,EAAW+B,EAAOZ,KAAK,QAeuEd,aAAcA,EAAcpB,QApD9H,WAII,IAHA,IAAI8C,EAAO,GAEPC,EAAgB,EACZC,EAAE,EAAGA,EAAEtC,EAAKmB,OAAQmB,GAAGD,EAAc,CACzC,IAAIE,EAAYvC,EAAKuC,UAAUD,EAAEA,EAHzB,IAIJA,EAAMtC,EAAKmB,OAAO,EAJd,GAKJoB,EAAYvC,EAAKuC,UAAUD,EAAEtC,EAAKmB,OAAO,GACnB,KAAjBnB,EAAKsC,EANN,KAOJD,EAPI,GAQJE,EAAYvC,EAAKuC,UAAUD,EAAEA,EAAED,KAE/BA,EAAgBE,EAAUC,YAAY,KACtCD,EAAYvC,EAAKuC,UAAUD,EAAEA,EAAED,IAEnCD,EAAOK,KAAKF,GAEhBtC,EAAQmC,EAAOZ,KAAK,SAmCyH,aAErIlD,IAAAC,cAAA,OAAKE,UAAU,iBAAiBC,MAAOL,EAAMM,MACzCL,IAAAC,cAAA,MAAIG,MAAO,CAACgE,QAAQ,SAAS,qBAC7BpE,IAAAC,cAAA,KAAGG,MAAO,CAACgE,QAAQ,OAAOC,WAAW,MAAM,IAAEnC,EAAU,QAAMR,EAAKmB,OAAO,gBAE7E7C,IAAAC,cAAA,OAAKE,UAAU,aACXH,IAAAC,cAAA,MAAIG,MAAOL,EAAMM,MAAM,WACvBL,IAAAC,cAAA,OAAKE,UAAU,QACXH,IAAAC,cAAA,YAAUG,MAAO,CAACkC,WAAW,SAASgC,OAAO,GAAInE,UAAU,eAAesC,SAAU,SAACC,GAASf,EAAQe,EAAMC,OAAOH,QAAS1B,GAAG,aAAa0B,MAAOV,EAASgB,KAAK,UC9G1KyB,MArCf,WAAe,IAAAjD,EACUC,mBAAS,CAC9BiD,MAAO,QACPC,gBAAiB,UACjBjD,EAAAC,YAAAH,EAAA,GAHKjB,EAAImB,EAAA,GAACkD,EAAOlD,EAAA,GAoBnB,OACExB,IAAAC,cAAAD,IAAAE,SAAA,KAEIF,IAAAC,cAACH,EAAM,CAACS,MAAM,YAAYa,MAAM,UAAUf,KAAMA,EAAMY,WAnB3C,WACG,UAAfZ,EAAKmE,OACNE,EAAQ,CACNF,MAAO,QACPC,gBAAiB,UAEnBE,SAASC,KAAKxE,MAAMqE,gBAAgB,UAGhCC,EAAQ,CACNF,MAAO,QACPC,gBAAiB,YAEnBE,SAASC,KAAKxE,MAAMqE,gBAAgB,cAOtCzE,IAAAC,cAAA,OAAKE,UAAU,aAKbH,IAAAC,cAACoB,EAAQ,CAACgB,QAAQ,4BAA4BhC,KAAMA,OC/B/CwE,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxCC,EAAAC,EAAA,GAAAC,KAAAF,EAAAG,KAAA,UAAqBD,KAAK,SAAAE,GAAiD,IAA9CC,EAAMD,EAANC,OAAQC,EAAMF,EAANE,OAAQC,EAAMH,EAANG,OAAQC,EAAMJ,EAANI,OAAQC,EAAOL,EAAPK,QAC3DJ,EAAOP,GACPQ,EAAOR,GACPS,EAAOT,GACPU,EAAOV,GACPW,EAAQX,MCDDY,IAASC,WAAWhB,SAASiB,eAAe,SACpDC,OACH7F,IAAAC,cAACD,IAAM8F,WAAU,KACf9F,IAAAC,cAACsE,EAAG,QAORM","file":"static/js/main.13743822.chunk.js","sourcesContent":["    import React from 'react'\r\n    // import {Link} from \"react-router-dom\"\r\n    import PropTypes from 'prop-types'\r\n    export default function Navbar(props){\r\n        return (\r\n            <>\r\n                <nav className=\"navbar navbar-expand-lg\" style={props.mode}>\r\n                    <div className=\"container-fluid\">\r\n                        <a className=\"navbar-brand\" style={props.mode} href=\"#\">{props.title}</a>\r\n                        <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n                            <span className=\"navbar-toggler-icon\"></span>\r\n                        </button>\r\n                        <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n                            <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n                                <li className=\"nav-item\">\r\n                                    <a className=\"nav-link active\" aria-current=\"page\" style={props.mode} href='#'>Home</a>  \r\n                                </li>\r\n                                {/* <li className=\"nav-item\">\r\n                                    <Link className=\"nav-link\" to='/about' style={props.mode}>{props.about}</Link>\r\n                                </li> */}\r\n                            </ul>\r\n                            <div className=\"form-check form-switch\" style={props.mode}>\r\n                                <input className=\"form-check-input\" type=\"checkbox\" onClick={props.toggleMode} id=\"flexSwitchCheckDefault\"/>\r\n                                <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">Dark-Mode</label>\r\n                            </div>\r\n                        </div>\r\n                    </div>  \r\n                </nav> \r\n            </>\r\n        )\r\n    }\r\n    Navbar.propTypes = {\r\n        title: PropTypes.string.isRequired,     //isRequired = you must insert this prop/property\r\n        about: PropTypes.string\r\n    }\r\n    Navbar.defaultProps={\r\n        title: 'AppName',\r\n        about: 'about'\r\n    }\r\n","import React,{useState} from 'react'\r\nexport default function TextForm(props){\r\n    const[text,setText] = useState(\"\");      //helementps to give us a Variable and Function asosiated with each other; to update variable's text you must need to use Function for it which you made; this known as UseState-Hook.\r\n    const[preview,setPreview] = useState(text);\r\n\r\n    let[wordCount,setWordCount]=useState(0)\r\n    const handleOnChange=(event)=>{\r\n        setText(event.target.value);\r\n        if(text===\"\"){setWordCount(0)}\r\n        setWordCount(text.split(/\\s+/).length)\r\n    }\r\n\r\n    const uppercase=()=>{\r\n        setText(text.toUpperCase())\r\n    }\r\n    let uppercase_onMouseHover=()=>{\r\n        setPreview(text.toUpperCase())\r\n    }\r\n    const onMouseLeave=()=>{\r\n        setPreview(text)\r\n    }\r\n\r\n\r\n    const lowercase=()=>{\r\n        setText(text.toLocaleLowerCase())\r\n    }\r\n    const lowercase_onMouseHover=()=>{\r\n        setPreview(text.toLocaleLowerCase())\r\n    }\r\n\r\n\r\n    const clearExtraSpaces=()=>{    \r\n        setText(text.split(/\\s+/).join(' '));\r\n    }\r\n    const clearExtraSpaces_onMouseHover=()=>{\r\n        setPreview(text.split(/\\s+/).join(' '))\r\n    }\r\n\r\n\r\n    const paragraph =()=>{\r\n        let newText = text.split(/\\s+/).join(' ')\r\n        newText = newText.split('.')\r\n        newText=newText.map((element,index)=>{\r\n            if(index===0){\r\n                element=element.trim()\r\n                element=element.replace(element.charAt(0),element.charAt(0).toUpperCase())\r\n                element.slice(1).toLocaleLowerCase()\r\n            }else{\r\n                element=element.trimEnd()\r\n                if(element.charAt(0)!==' '){\r\n                    element = ' '+element\r\n                }\r\n                element=element.replace(element.charAt(1),element.charAt(1).toUpperCase())\r\n                element.slice(2).toLocaleLowerCase()\r\n            }\r\n            return element\r\n        })\r\n        newText = newText.join('.')\r\n        setText(newText);\r\n    }\r\n    const paragraph_onMouseHover =()=>{\r\n        let newText = text.split(/\\s+/).join(' ')\r\n        newText = newText.split('.')\r\n        newText=newText.map((element,index)=>{\r\n            if(index===0){\r\n                element=element.trim()\r\n                let part1ofString = element.charAt(0).toUpperCase()\r\n                let part2ofString = element.slice(1).toLocaleLowerCase()\r\n                element = part1ofString + part2ofString;\r\n            }else{\r\n                element=element.trimEnd()\r\n                let part1ofString = element.charAt(1).toUpperCase()\r\n                let part2ofString = element.slice(2).toLocaleLowerCase()\r\n                element = ' ' + part1ofString + part2ofString;\r\n            }\r\n            return element\r\n        })\r\n        newText = newText.join('.');\r\n        setPreview(newText)\r\n    }\r\n    \r\n    const sortInLine=()=>{\r\n        setText(text.split('.').join('.\\n'))\r\n    }\r\n    const sortInLine_onMouseHover=()=>{\r\n        let newText = text.split('.')\r\n        newText=newText.map((element,index)=>{\r\n            element=element.trim()\r\n            let part1ofString = element.charAt(0).toUpperCase()\r\n            let part2ofString = element.slice(1).toLocaleLowerCase()\r\n            element = part1ofString + part2ofString;\r\n            return element\r\n        })\r\n        newText = newText.join('.\\n')\r\n        setPreview(newText)\r\n        \r\n    }\r\n\r\n    \r\n    function wordWrap(){\r\n        let newStr=[]\r\n        let limit = 50\r\n        let EndSpaceIndex = 0\r\n        for(let i=0; i<text.length; i+=EndSpaceIndex){\r\n            let substring = text.substring(i,i+limit)\r\n            if( i > ((text.length-1)-limit) ){                // for last-line\r\n                substring = text.substring(i,text.length-1)\r\n            }else if(text[i+limit] == ' ' ){              // if line has its last word.\r\n                EndSpaceIndex = limit\r\n                substring = text.substring(i,i+EndSpaceIndex)\r\n            }else{\r\n                EndSpaceIndex = substring.lastIndexOf(' ')          // if last word is'nt complete\r\n                substring = text.substring(i,i+EndSpaceIndex)\r\n            }\r\n            newStr.push(substring)\r\n        }\r\n        setText(newStr.join('\\n'))\r\n    }\r\n    \r\n    function wordWrap_onMouseHover(){\r\n        let newStr=[]\r\n        let limit = 50\r\n        let EndSpaceIndex = 0\r\n        for(let i=0; i<text.length; i+=EndSpaceIndex){\r\n            let substring = text.substring(i,i+limit)\r\n            if( i > ((text.length-1)-limit) ){                // for last-line\r\n                substring = text.substring(i,text.length-1)\r\n            }else if(text[i+limit] == ' ' ){              // if line has its last word.\r\n                EndSpaceIndex = limit\r\n                substring = text.substring(i,i+EndSpaceIndex)\r\n            }else{\r\n                EndSpaceIndex = substring.lastIndexOf(' ')          // if last word is'nt complete\r\n                substring = text.substring(i,i+EndSpaceIndex)\r\n            }\r\n            newStr.push(substring)\r\n        }\r\n        setPreview(newStr.join('\\n'))\r\n    }\r\n    return(\r\n        <>\r\n            <div id='home'>\r\n                <div className=\"container my-3\" style={props.mode} id=\"container\">\r\n                    <h2>{props.heading}</h2>\r\n                    <div className='an=3'>\r\n                        <textarea style={{whiteSpace:'nowrap'}} placeholder='Enter text here...' className='form-control' value={text} onChange={handleOnChange} id='myBox' rows='6'></textarea>\r\n                    </div>\r\n                    <button className='btn btn-primary my-2'onMouseOver={uppercase_onMouseHover} onMouseLeave={onMouseLeave} onClick={uppercase}>Uppercase</button>\r\n                    <button className='btn btn-primary my-2 mx-2' onMouseOver={lowercase_onMouseHover} onMouseLeave={onMouseLeave} onClick={lowercase}>Lowercase</button>\r\n                    <button className='btn btn-primary my-2 mx-2' onMouseOver={clearExtraSpaces_onMouseHover} onMouseLeave={onMouseLeave} onClick={clearExtraSpaces}>Clear-Extra-Spaces</button>\r\n                    <button className='btn btn-primary my-2 mx-2' onMouseOver={paragraph_onMouseHover} onMouseLeave={onMouseLeave} onClick={paragraph}>paragraph</button>\r\n                    <button className='btn btn-primary my-2 mx-2' onMouseOver={sortInLine_onMouseHover} onMouseLeave={onMouseLeave} onClick={sortInLine}>sortInLine</button>\r\n                    <button className='btn btn-primary my-2 mx-2' onMouseOver={wordWrap_onMouseHover} onMouseLeave={onMouseLeave} onClick={wordWrap}>wordWrap</button>\r\n                </div>\r\n                <div className='container my-4' style={props.mode}>\r\n                    <h2 style={{padding:\"15px\"}}>Your Text summary</h2>\r\n                    <p style={{padding:\"15px\",paddingTop:\"0\"}}> {wordCount} and {text.length} charecters</p>\r\n                </div>\r\n                <div className=\"container\">\r\n                    <h2 style={props.mode}>preview</h2>\r\n                    <div className='an=3'>\r\n                        <textarea style={{whiteSpace:'nowrap',border:0}} className='form-control' onChange={(event)=>{setText(event.target.value)}} id='previewBox' value={preview} rows='6'></textarea>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </>\r\n    )\r\n}","// import logo from './logo.svg';\nimport React from 'react';\nimport Navbar from './components/Navbar';\nimport './App.css';\nimport TextForm from './components/TextForm';\n// import About from './components/About';\nimport { useState } from 'react';\n// import {\n//   BrowserRouter ,\n//   Routes,\n//   Route,\n// } from \"react-router-dom\"\n\nfunction App() {\n  const [mode,setMode] = useState({\n    color: 'black',\n    backgroundColor: 'white'\n  }); \n  const toggleMode=()=>{\n    if(mode.color === 'white' ){\n      setMode({\n        color: 'black',\n        backgroundColor: 'white'\n      })\n      document.body.style.backgroundColor='white'\n    }\n    else{\n          setMode({\n            color: 'white',\n            backgroundColor: '#212529'\n          })\n          document.body.style.backgroundColor='#343a40'\n      }\n  }\n  return (\n    <>\n      {/* <BrowserRouter> */}\n        <Navbar title='TextUtils' about=\"AboutUs\" mode={mode} toggleMode={toggleMode}/>\n        <div className='container'>\n          {/* <Routes>\n            <Route path=\"/about\" element={<About mode={mode}/>}/>       // in \" path='' \", react does partialMatching to get the exact component/page use -\"exact\" key word between route and path\n            <Route path='/' element={<TextForm heading='Enter the Text to Analyse' mode={mode}/>}/> \n          </Routes> */}\n          <TextForm heading='Enter the Text to Analyse' mode={mode}/>\n        </div>\n      {/* </BrowserRouter> */}\n    </>\n  );\n}\n\nexport default App;\n  ","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}