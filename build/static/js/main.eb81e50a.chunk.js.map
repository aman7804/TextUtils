{"version":3,"sources":["components/Navbar.js","components/TextForm.js","components/About.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","React","createElement","Fragment","className","style","mode","Link","to","title","type","data-bs-toggle","data-bs-target","aria-controls","aria-expanded","aria-label","id","aria-current","about","onClick","toggleMode","htmlFor","defaultProps","TextForm","_useState","useState","_useState2","_slicedToArray","text","setText","_useState3","_useState4","preview","setPreview","_useState5","_useState6","wordCount","setWordCount","onMouseLeave","heading","whiteSpace","placeholder","value","onChange","event","target","split","length","rows","onMouseOver","toUpperCase","toLocaleLowerCase","join","newText","map","element","index","part1ofString","trim","charAt","part2ofString","slice","trimEnd","replace","newStr","EndSpaceIndex","i","substring","lastIndexOf","push","padding","paddingTop","border","About","aria-labelledby","data-bs-parent","App","color","backgroundColor","setMode","BrowserRouter","document","body","Routes","Route","path","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.eb81e50a.chunk.js","sourcesContent":["    import React from 'react'\r\n    import {Link} from \"react-router-dom\"\r\n    import PropTypes from 'prop-types'\r\n    export default function Navbar(props){\r\n        return (\r\n            <>\r\n                <nav className=\"navbar navbar-expand-lg\" style={props.mode}>\r\n                    <div className=\"container-fluid\">\r\n                        <Link className=\"navbar-brand\" style={props.mode} to=\"/\">{props.title}</Link>\r\n                        <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n                            <span className=\"navbar-toggler-icon\"></span>\r\n                        </button>\r\n                        <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n                            <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n                                <li className=\"nav-item\">\r\n                                    <Link className=\"nav-link active\" aria-current=\"page\" style={props.mode} to='/'>Home</Link>  \r\n                                </li>\r\n                                <li className=\"nav-item\">\r\n                                    <Link className=\"nav-link\" to='/about' style={props.mode}>{props.about}</Link>\r\n                                </li>\r\n                            </ul>\r\n                            <div className=\"form-check form-switch\" style={props.mode}>\r\n                                <input className=\"form-check-input\" type=\"checkbox\" onClick={props.toggleMode} id=\"flexSwitchCheckDefault\"/>\r\n                                <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">Dark-Mode</label>\r\n                            </div>\r\n                        </div>\r\n                    </div>  \r\n                </nav> \r\n            </>\r\n        )\r\n    }\r\n    Navbar.propTypes = {\r\n        title: PropTypes.string.isRequired,     //isRequired = you must insert this prop/property\r\n        about: PropTypes.string\r\n    }\r\n    Navbar.defaultProps={\r\n        title: 'AppName',\r\n        about: 'about'\r\n    }\r\n","import React,{useState} from 'react'\r\nexport default function TextForm(props){\r\n    const[text,setText] = useState(\"\");      //helementps to give us a Variable and Function asosiated with each other; to update variable's text you must need to use Function for it which you made; this known as UseState-Hook.\r\n    const[preview,setPreview] = useState(text);\r\n\r\n    let[wordCount,setWordCount]=useState(0)\r\n    const handleOnChange=(event)=>{\r\n        setText(event.target.value);\r\n        if(text===\"\"){setWordCount(0)}\r\n        setWordCount(text.split(/\\s+/).length)\r\n    }\r\n\r\n    const uppercase=()=>{\r\n        setText(text.toUpperCase())\r\n    }\r\n    let uppercase_onMouseHover=()=>{\r\n        setPreview(text.toUpperCase())\r\n    }\r\n    const onMouseLeave=()=>{\r\n        setPreview(text)\r\n    }\r\n\r\n\r\n    const lowercase=()=>{\r\n        setText(text.toLocaleLowerCase())\r\n    }\r\n    const lowercase_onMouseHover=()=>{\r\n        setPreview(text.toLocaleLowerCase())\r\n    }\r\n\r\n\r\n    const clearExtraSpaces=()=>{    \r\n        setText(text.split(/\\s+/).join(' '));\r\n    }\r\n    const clearExtraSpaces_onMouseHover=()=>{\r\n        setPreview(text.split(/\\s+/).join(' '))\r\n    }\r\n\r\n\r\n    const paragraph =()=>{\r\n        let newText = text.split(/\\s+/).join(' ')\r\n        newText = newText.split('.')\r\n        newText=newText.map((element,index)=>{\r\n            if(index===0){\r\n                element=element.trim()\r\n                element=element.replace(element.charAt(0),element.charAt(0).toUpperCase())\r\n                element.slice(1).toLocaleLowerCase()\r\n            }else{\r\n                element=element.trimEnd()\r\n                if(element.charAt(0)!==' '){\r\n                    element = ' '+element\r\n                }\r\n                element=element.replace(element.charAt(1),element.charAt(1).toUpperCase())\r\n                element.slice(2).toLocaleLowerCase()\r\n            }\r\n            return element\r\n        })\r\n        newText = newText.join('.')\r\n        setText(newText);\r\n    }\r\n    const paragraph_onMouseHover =()=>{\r\n        let newText = text.split(/\\s+/).join(' ')\r\n        newText = newText.split('.')\r\n        newText=newText.map((element,index)=>{\r\n            if(index===0){\r\n                element=element.trim()\r\n                let part1ofString = element.charAt(0).toUpperCase()\r\n                let part2ofString = element.slice(1).toLocaleLowerCase()\r\n                element = part1ofString + part2ofString;\r\n            }else{\r\n                element=element.trimEnd()\r\n                let part1ofString = element.charAt(1).toUpperCase()\r\n                let part2ofString = element.slice(2).toLocaleLowerCase()\r\n                element = ' ' + part1ofString + part2ofString;\r\n            }\r\n            return element\r\n        })\r\n        newText = newText.join('.');\r\n        setPreview(newText)\r\n    }\r\n    \r\n    const sortInLine=()=>{\r\n        setText(text.split('.').join('.\\n'))\r\n    }\r\n    const sortInLine_onMouseHover=()=>{\r\n        let newText = text.split('.')\r\n        newText=newText.map((element,index)=>{\r\n            element=element.trim()\r\n            let part1ofString = element.charAt(0).toUpperCase()\r\n            let part2ofString = element.slice(1).toLocaleLowerCase()\r\n            element = part1ofString + part2ofString;\r\n            return element\r\n        })\r\n        newText = newText.join('.\\n')\r\n        setPreview(newText)\r\n        \r\n    }\r\n\r\n    \r\n    function wordWrap(){\r\n        let newStr=[]\r\n        let limit = 50\r\n        let EndSpaceIndex = 0\r\n        for(let i=0; i<text.length; i+=EndSpaceIndex){\r\n            let substring = text.substring(i,i+limit)\r\n            if( i > ((text.length-1)-limit) ){                // for last-line\r\n                substring = text.substring(i,text.length-1)\r\n            }else if(text[i+limit] == ' ' ){              // if line has its last word.\r\n                EndSpaceIndex = limit\r\n                substring = text.substring(i,i+EndSpaceIndex)\r\n            }else{\r\n                EndSpaceIndex = substring.lastIndexOf(' ')          // if last word is'nt complete\r\n                substring = text.substring(i,i+EndSpaceIndex)\r\n            }\r\n            newStr.push(substring)\r\n        }\r\n        setText(newStr.join('\\n'))\r\n    }\r\n    \r\n    function wordWrap_onMouseHover(){\r\n        let newStr=[]\r\n        let limit = 50\r\n        let EndSpaceIndex = 0\r\n        for(let i=0; i<text.length; i+=EndSpaceIndex){\r\n            let substring = text.substring(i,i+limit)\r\n            if( i > ((text.length-1)-limit) ){                // for last-line\r\n                substring = text.substring(i,text.length-1)\r\n            }else if(text[i+limit] == ' ' ){              // if line has its last word.\r\n                EndSpaceIndex = limit\r\n                substring = text.substring(i,i+EndSpaceIndex)\r\n            }else{\r\n                EndSpaceIndex = substring.lastIndexOf(' ')          // if last word is'nt complete\r\n                substring = text.substring(i,i+EndSpaceIndex)\r\n            }\r\n            newStr.push(substring)\r\n        }\r\n        setPreview(newStr.join('\\n'))\r\n    }\r\n    return(\r\n        <>\r\n            <div id='home'>\r\n                <div className=\"container my-3\" style={props.mode} id=\"container\">\r\n                    <h2>{props.heading}</h2>\r\n                    <div className='an=3'>\r\n                        <textarea style={{whiteSpace:'nowrap'}} placeholder='Enter text here...' className='form-control' value={text} onChange={handleOnChange} id='myBox' rows='6'></textarea>\r\n                    </div>\r\n                    <button className='btn btn-primary my-2'onMouseOver={uppercase_onMouseHover} onMouseLeave={onMouseLeave} onClick={uppercase}>Uppercase</button>\r\n                    <button className='btn btn-primary my-2 mx-2' onMouseOver={lowercase_onMouseHover} onMouseLeave={onMouseLeave} onClick={lowercase}>Lowercase</button>\r\n                    <button className='btn btn-primary my-2 mx-2' onMouseOver={clearExtraSpaces_onMouseHover} onMouseLeave={onMouseLeave} onClick={clearExtraSpaces}>Clear-Extra-Spaces</button>\r\n                    <button className='btn btn-primary my-2 mx-2' onMouseOver={paragraph_onMouseHover} onMouseLeave={onMouseLeave} onClick={paragraph}>paragraph</button>\r\n                    <button className='btn btn-primary my-2 mx-2' onMouseOver={sortInLine_onMouseHover} onMouseLeave={onMouseLeave} onClick={sortInLine}>sortInLine</button>\r\n                    <button className='btn btn-primary my-2 mx-2' onMouseOver={wordWrap_onMouseHover} onMouseLeave={onMouseLeave} onClick={wordWrap}>wordWrap</button>\r\n                </div>\r\n                <div className='container my-4' style={props.mode}>\r\n                    <h2 style={{padding:\"15px\"}}>Your Text summary</h2>\r\n                    <p style={{padding:\"15px\",paddingTop:\"0\"}}> {wordCount} and {text.length} charecters</p>\r\n                </div>\r\n                <div className=\"container\">\r\n                    <h2 style={props.mode}>preview</h2>\r\n                    <div className='an=3'>\r\n                        <textarea style={{whiteSpace:'nowrap',border:0}} className='form-control' onChange={(event)=>{setText(event.target.value)}} id='previewBox' value={preview} rows='6'></textarea>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </>\r\n    )\r\n}","import React from \"react\";\r\nexport default function About(props){\r\n    return(\r\n        <>            \r\n            <div className=\"container my-3\" style={props.mode}>\r\n                <h1 className='container my-3'>About us</h1>\r\n                <div className=\"accordion\" id=\"accordionExample\">\r\n                    <div className=\"accordion-item\">\r\n                        <h2 className=\"accordion-header\" id=\"headingOne\">\r\n                            <button className=\"accordion-button\" style={props.mode} type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseOne\" aria-expanded=\"true\" aria-controls=\"collapseOne\">\r\n                                Accordion Item #1\r\n                            </button>\r\n                        </h2>\r\n                        <div id=\"collapseOne\" className=\"accordion-collapse collapse show\" aria-labelledby=\"headingOne\" data-bs-parent=\"#accordionExample\">\r\n                            <div className=\"accordion-body\" style={props.mode}>\r\n                                <strong>This is the first item's accordion body.</strong> It is shown by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"accordion-item\">\r\n                        <h2 className=\"accordion-header\" id=\"headingTwo\">\r\n                        <button className=\"accordion-button collapsed\"style={props.mode} type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseTwo\" aria-expanded=\"false\" aria-controls=\"collapseTwo\">\r\n                            Accordion Item #2\r\n                        </button>\r\n                        </h2>\r\n                        <div id=\"collapseTwo\" className=\"accordion-collapse collapse\" aria-labelledby=\"headingTwo\" data-bs-parent=\"#accordionExample\">\r\n                        <div className=\"accordion-body\"style={props.mode}>\r\n                            <strong>This is the second item's accordion body.</strong> It is hidden by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n                        </div>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"accordion-item\">\r\n                        <h2 className=\"accordion-header\" id=\"headingThree\">\r\n                        <button className=\"accordion-button collapsed\" style={props.mode} type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseThree\" aria-expanded=\"false\" aria-controls=\"collapseThree\">\r\n                            Accordion Item #3\r\n                        </button>\r\n                        </h2>\r\n                        <div id=\"collapseThree\" className=\"accordion-collapse collapse\" aria-labelledby=\"headingThree\" data-bs-parent=\"#accordionExample\">\r\n                            <div className=\"accordion-body\"style={props.mode}>\r\n                                <strong>This is the third item's accordion body.</strong> It is hidden by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </>\r\n    )\r\n}","// import logo from './logo.svg';\nimport React from 'react';\nimport Navbar from './components/Navbar';\nimport './App.css';\nimport TextForm from './components/TextForm';\nimport About from './components/About';\nimport { useState } from 'react';\nimport {\n  BrowserRouter ,\n  Routes,\n  Route,\n} from \"react-router-dom\"\n\nfunction App() {\n  const [mode,setMode] = useState({\n    color: 'black',\n    backgroundColor: 'white'\n  }); \n  const toggleMode=()=>{\n    if(mode.color === 'white' ){\n      setMode({\n        color: 'black',\n        backgroundColor: 'white'\n      })\n      document.body.style.backgroundColor='white'\n    }\n    else{\n          setMode({\n            color: 'white',\n            backgroundColor: '#212529'\n          })\n          document.body.style.backgroundColor='#343a40'\n      }\n  }\n  return (\n    <>\n      <BrowserRouter>\n        <Navbar title='TextUtils' about=\"AboutUs\" mode={mode} toggleMode={toggleMode}/>\n        <div className='container'>\n          <Routes>\n            <Route path=\"/about\" element={<About mode={mode}/>}/>       // in \" path='' \", react does partialMatching to get the exact component/page use -\"exact\" key word between route and path\n            <Route path='/' element={<TextForm heading='Enter the Text to Analyse' mode={mode}/>}/> \n          </Routes>\n        </div>\n      </BrowserRouter>\n    </>\n  );\n}\n\nexport default App;\n  ","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}